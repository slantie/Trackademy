// Trackademy Prisma schema file - Version 4

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  STUDENT
  FACULTY
  ADMIN
}

enum Designation {
  HOD
  PROFESSOR
  ASST_PROFESSOR
  LAB_ASSISTANT
}

enum SemesterType {
  ODD
  EVEN
}

enum SubjectType {
  MANDATORY
  ELECTIVE
}

enum LectureType {
  THEORY
  PRACTICAL
}

enum ExamType {
  MIDTERM
  REMEDIAL
  FINAL
  REPEAT
}

// Feature: Results
enum ResultStatus {
  PASS
  FAIL
  TRIAL
  ABSENT
  UNKNOWN
  WITHHELD
}

// Feature: Attendance
enum AttendanceStatus {
  PRESENT
  ABSENT
  MEDICAL_LEAVE
  AUTHORIZED_LEAVE
}

// Feature: Assignments & Submissions
enum SubmissionStatus {
  SUBMITTED
  GRADED
  PENDING_REVIEW
}

// Feature: Internships
enum InternshipStatus {
  APPLIED
  ONGOING
  COMPLETED
  CANCELLED
}

model College {
  id            String         @id @default(cuid())
  name          String         @unique
  abbreviation  String         @unique
  website       String?
  address       String?
  contactNumber String?
  isDeleted     Boolean        @default(false)
  departments   Department[]
  academicYears AcademicYear[]

  @@map("colleges")
}

model Department {
  id           String     @id @default(cuid())
  name         String
  abbreviation String
  collegeId    String
  isDeleted    Boolean    @default(false)
  college      College    @relation(fields: [collegeId], references: [id])
  subjects     Subject[]
  faculties    Faculty[]
  semesters    Semester[]
  students     Student[]

  @@unique([collegeId, name])
  @@index([collegeId])
  @@map("departments")
}

model Subject {
  id             String      @id @default(cuid())
  name           String
  abbreviation   String
  code           String
  type           SubjectType @default(MANDATORY)
  semesterNumber Int
  isDeleted      Boolean     @default(false)
  departmentId   String
  department     Department  @relation(fields: [departmentId], references: [id])
  courses        Course[]
  Result         Result[]

  @@unique([code, departmentId])
  @@index([departmentId])
  @@map("subjects")
}

model Faculty {
  id           String      @id @default(cuid())
  fullName     String
  designation  Designation
  abbreviation String?
  joiningDate  DateTime?
  isDeleted    Boolean     @default(false)
  userId       String      @unique
  user         User        @relation(fields: [userId], references: [id])
  departmentId String
  department   Department  @relation(fields: [departmentId], references: [id])
  courses      Course[]

  @@index([departmentId])
  @@map("faculties")
}

model User {
  id       String   @id @default(cuid())
  email    String   @unique
  password String
  role     Role
  student  Student?
  faculty  Faculty?

  @@map("users")
}

model AcademicYear {
  id        String     @id @default(cuid())
  year      String     @unique
  isActive  Boolean    @default(false)
  isDeleted Boolean    @default(false)
  collegeId String
  college   College    @relation(fields: [collegeId], references: [id])
  semesters Semester[]

  @@index([collegeId])
  @@map("academic_years")
}

model Semester {
  id             String       @id @default(cuid())
  semesterNumber Int
  semesterType   SemesterType
  departmentId   String
  academicYearId String
  isDeleted      Boolean      @default(false)
  department     Department   @relation(fields: [departmentId], references: [id])
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  divisions      Division[]
  courses        Course[]
  students       Student[]
  exams          Exam[]

  @@unique([academicYearId, departmentId, semesterNumber])
  @@index([departmentId])
  @@index([academicYearId])
  @@map("semesters")
}

model Division {
  id         String    @id @default(cuid())
  name       String
  semesterId String
  isDeleted  Boolean   @default(false)
  semester   Semester  @relation(fields: [semesterId], references: [id])
  students   Student[]
  courses    Course[]

  @@unique([name, semesterId])
  @@index([semesterId])
  @@map("divisions")
}

model Course {
  id          String      @id @default(cuid())
  lectureType LectureType
  batch       String?
  isDeleted   Boolean     @default(false)

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  semesterId String
  semester   Semester @relation(fields: [semesterId], references: [id])

  divisionId String
  division   Division @relation(fields: [divisionId], references: [id])

  enrollments StudentEnrollment[]
  Attendance  Attendance[]
  assignments Assignment[]

  @@unique([subjectId, facultyId, semesterId, divisionId, lectureType, batch])
  @@index([subjectId])
  @@index([facultyId])
  @@index([semesterId])
  @@index([divisionId])
  @@map("courses")
}

model StudentEnrollment {
  id        String  @id @default(cuid())
  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  @@unique([studentId, courseId])
  @@index([studentId])
  @@index([courseId])
  @@map("student_enrollments")
}

model Student {
  id               String  @id @default(cuid())
  enrollmentNumber String  @unique
  fullName         String
  batch            String
  isDeleted        Boolean @default(false)
  userId           String  @unique
  user             User    @relation(fields: [userId], references: [id])

  departmentId String
  semesterId   String
  divisionId   String

  department Department @relation(fields: [departmentId], references: [id])
  semester   Semester   @relation(fields: [semesterId], references: [id])
  division   Division   @relation(fields: [divisionId], references: [id])

  enrollments StudentEnrollment[]
  ExamResult  ExamResult[]
  Attendance  Attendance[]
  submissions Submission[]
  internships Internship[]

  @@index([departmentId])
  @@index([semesterId])
  @@index([divisionId])
  @@map("students")
}

// Feature: Results
model Exam {
  id          String   @id @default(cuid())
  name        String   @default("Untitled Exam")
  examType    ExamType
  semesterId  String
  isPublished Boolean  @default(false)
  isDeleted   Boolean  @default(false)

  semester    Semester     @relation(fields: [semesterId], references: [id])
  examResults ExamResult[]

  @@unique([semesterId, examType])
  @@index([semesterId])
  @@map("exams")
}

model ExamResult {
  id                      String       @id @default(cuid())
  studentEnrollmentNumber String
  spi                     Float
  cpi                     Float
  status                  ResultStatus

  studentId String?
  student   Student? @relation(fields: [studentId], references: [id])

  examId String
  exam   Exam   @relation(fields: [examId], references: [id])

  results Result[]

  @@unique([examId, studentEnrollmentNumber])
  @@index([studentId])
  @@index([examId])
  @@index([studentEnrollmentNumber])
  @@map("exam_results")
}

model Result {
  id      String @id @default(cuid())
  grade   String
  credits Int

  examResultId String
  examResult   ExamResult @relation(fields: [examResultId], references: [id])

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])

  @@unique([examResultId, subjectId])
  @@index([examResultId])
  @@index([subjectId])
  @@map("results")
}

// Feature: Attendance
model Attendance {
  id     String           @id @default(cuid())
  date   DateTime         @db.Date
  status AttendanceStatus

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  // A student can only have one attendance record for a specific course on a specific day.
  @@unique([courseId, studentId, date])
  @@index([courseId])
  @@index([studentId])
  @@map("attendances")
}

// Feature: Assignments & Submissions
model Assignment {
  id          String   @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime
  totalMarks  Int
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  submissions Submission[]

  @@index([courseId])
  @@index([dueDate])
  @@map("assignments")
}

model Submission {
  id             String           @id @default(cuid())
  content        String?
  filePath       String?
  submittedAt    DateTime         @default(now())
  marksAwarded   Int?
  feedback       String?
  status         SubmissionStatus @default(SUBMITTED)
  isDeleted      Boolean          @default(false)
  gradedAt       DateTime?
  updatedAt      DateTime         @updatedAt

  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  @@unique([assignmentId, studentId])
  @@index([assignmentId])
  @@index([studentId])
  @@index([status])
  @@map("submissions")
}

// Feature: Internships
model Internship {
  id                       String            @id @default(cuid())
  companyName              String
  role                     String
  description              String?
  startDate                DateTime          @db.Date
  endDate                  DateTime?         @db.Date
  status                   InternshipStatus  @default(APPLIED)
  stipend                  Float?
  location                 String?
  offerLetterPath          String?
  nocPath                  String?
  completionCertificatePath String?
  isDeleted                Boolean           @default(false)
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  @@index([studentId])
  @@index([status])
  @@index([startDate])
  @@map("internships")
}

// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "../ERD.svg"
//   theme    = "forest"
// }